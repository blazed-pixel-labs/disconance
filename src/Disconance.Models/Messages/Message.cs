using Disconance.Models.Applications;
using Disconance.Models.Channels;
using Disconance.Models.Stickers;
using Disconance.Models.Users;

namespace Disconance.Models.Messages;

/// <summary>
///     Represents a message sent in a channel within Discord.
/// </summary>
public class Message
{
    /// <summary>
    ///     ID of the message.
    /// </summary>
    public Snowflake Id { get; set; }

    /// <summary>
    ///     ID of the channel the message was sent in.
    /// </summary>
    public Snowflake ChannelId { get; set; }

    /// <summary>
    ///     The author of this message (not guaranteed to be a valid user).
    /// </summary>
    public User Author { get; set; } = null!;

    /// <summary>
    ///     Contents of the message.
    /// </summary>
    public string Content { get; set; } = string.Empty;

    /// <summary>
    ///     When this message was sent.
    /// </summary>
    public DateTimeOffset Timestamp { get; set; }

    /// <summary>
    ///     When this message was edited (or null if never).
    /// </summary>
    public DateTimeOffset? EditedTimestamp { get; set; }

    /// <summary>
    ///     Whether this was a TTS message.
    /// </summary>
    public bool Tts { get; set; }

    /// <summary>
    ///     Whether this message mentions everyone.
    /// </summary>
    public bool MentionEveryone { get; set; }

    /// <summary>
    ///     Users specifically mentioned in the message.
    /// </summary>
    public List<User> Mentions { get; set; } = new();

    /// <summary>
    ///     Roles specifically mentioned in this message.
    /// </summary>
    public List<Snowflake> MentionRoles { get; set; } = new();

    /// <summary>
    ///     Channels specifically mentioned in this message.
    /// </summary>
    public List<ChannelMention>? MentionChannels { get; set; }

    /// <summary>
    ///     Any attached files.
    /// </summary>
    public List<Attachment> Attachments { get; set; } = new();

    /// <summary>
    ///     Any embedded content.
    /// </summary>
    public List<Embed> Embeds { get; set; } = new();

    /// <summary>
    ///     Reactions to the message.
    /// </summary>
    public List<Reaction>? Reactions { get; set; }

    /// <summary>
    ///     Used for validating a message was sent.
    /// </summary>
    public object? Nonce { get; set; }

    /// <summary>
    ///     Whether this message is pinned.
    /// </summary>
    public bool Pinned { get; set; }

    /// <summary>
    ///     If the message is generated by a webhook, this is the webhook's id.
    /// </summary>
    public Snowflake? WebhookId { get; set; }

    /// <summary>
    ///     Type of message.
    /// </summary>
    public MessageType Type { get; set; }

    /// <summary>
    ///     Sent with Rich Presence-related chat embeds.
    /// </summary>
    public MessageActivity? Activity { get; set; }

    /// <summary>
    ///     Sent with Rich Presence-related chat embeds.
    /// </summary>
    public Application? Application { get; set; }

    /// <summary>
    ///     If the message is an Interaction or application-owned webhook, this is the id of the application.
    /// </summary>
    public Snowflake? ApplicationId { get; set; }

    /// <summary>
    ///     Message flags combined as a bitfield.
    /// </summary>
    public MessageFlags? Flags { get; set; }

    /// <summary>
    ///     Data showing the source of a crosspost, channel follow add, pin, or reply message.
    /// </summary>
    public MessageReference? MessageReference { get; set; }

    /// <summary>
    ///     The message associated with the message_reference. This is a minimal subset of fields in a message.
    /// </summary>
    public List<MessageSnapshot>? MessageSnapshots { get; set; }

    /// <summary>
    ///     The message associated with the message_reference.
    /// </summary>
    public Message? ReferencedMessage { get; set; }

    /// <summary>
    ///     Sent if the message is sent as a result of an interaction.
    /// </summary>
    public MessageInteractionMetadata? InteractionMetadata { get; set; }

    /// <summary>
    ///     Deprecated in favor of interaction_metadata; sent if the message is a response to an interaction.
    /// </summary>
    public MessageInteraction? Interaction { get; set; }

    /// <summary>
    ///     The thread that was started from this message, includes thread member object.
    /// </summary>
    public Channel? Thread { get; set; }

    /// <summary>
    ///     Sent if the message contains components like buttons, action rows, or other interactive components.
    /// </summary>
    public List<MessageComponent>? Components { get; set; }

    /// <summary>
    ///     Sent if the message contains stickers.
    /// </summary>
    public List<MessageStickerItem>? StickerItems { get; set; }

    /// <summary>
    ///     Deprecated: the stickers sent with the message.
    /// </summary>
    public List<Sticker>? Stickers { get; set; }

    /// <summary>
    ///     Approximate position of the message in a thread.
    /// </summary>
    public int? Position { get; set; }

    /// <summary>
    ///     Data of the role subscription purchase or renewal that prompted this message.
    /// </summary>
    public RoleSubscriptionData? RoleSubscriptionData { get; set; }

    /// <summary>
    ///     Data for users, members, channels, and roles in the message's auto-populated select menus.
    /// </summary>
    public ResolvedData? Resolved { get; set; }

    /// <summary>
    ///     A poll, if present.
    /// </summary>
    public Poll? Poll { get; set; }

    /// <summary>
    ///     The call associated with the message.
    /// </summary>
    public MessageCall? Call { get; set; }
}
